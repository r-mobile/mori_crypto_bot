const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const PORT = process.env.PORT || 3000;

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
const app = express();
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
const users = new Map();
const priceHistory = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_SETTINGS = {
  alerts: true,
  priceChangeThreshold: 5, // –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  checkInterval: 60000, // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)
  priceAlerts: {
    max: null, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    min: null, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    maxTriggered: false, // —Ñ–ª–∞–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è max alert
    minTriggered: false  // —Ñ–ª–∞–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è min alert
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã $MORI
async function getMoriPrice() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    // –ó–∞–º–µ–Ω–∏—Ç–µ 'mori' –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Ç–æ–∫–µ–Ω–∞ –≤ CoinGecko
    const response = await axios.get(
      'https://api.coingecko.com/api/v3/simple/price?ids=mori-coin&vs_currencies=usd&include_24hr_change=true&include_market_cap=true'
    );
    
    if (response.data && response.data["mori-coin"]) {
      const mc = response.data["mori-coin"];
      return {
        price: mc.usd,
        change24h: mc.usd_24h_change || 0,
        capital: parseInt(mc.usd_market_cap) || 0
      };
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DEXScreener API
    const dexResponse = await axios.get(
      'https://api.dexscreener.com/latest/dex/search/?q=MORI'
    );
    
    if (dexResponse.data && dexResponse.data.pairs && dexResponse.data.pairs.length > 0) {
      const pair = dexResponse.data.pairs[0];
      return {
        price: parseFloat(pair.priceUsd),
        change24h: parseFloat(pair.priceChange.h24) || 0,
        capital: parseInt(pair.marketCap) || 0
      };
    }
    
    throw new Error('No price data found');
  } catch (error) {
    console.error('Error fetching MORI price:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
async function sendPriceTargetAlert(chatId, priceData, alertType, targetPrice) {
  const emoji = alertType === 'max' ? 'üöÄ' : '‚ö†Ô∏è';
  const direction = alertType === 'max' ? '–≤—ã—à–µ' : '–Ω–∏–∂–µ';
  const title = alertType === 'max' ? '–¶–ï–ù–ê –ü–†–û–ë–ò–õ–ê –ú–ê–ö–°–ò–ú–£–ú!' : '–¶–ï–ù–ê –£–ü–ê–õ–ê –ù–ò–ñ–ï –ú–ò–ù–ò–ú–£–ú–ê!';
  
  const message = `
${emoji} ${title}

üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: $${targetPrice}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${priceData.price.toFixed(8)}
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: ${priceData.change24h.toFixed(2)}%
üê≥ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: $${priceData.capital}

‚ö° –¶–µ–Ω–∞ —Å—Ç–∞–ª–∞ ${direction} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!
`;
  
  try {
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error sending price target alert:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ
async function sendPriceAlert(chatId, priceData, changePercent) {
  const emoji = changePercent > 0 ? 'üöÄ' : '‚ö†Ô∏è';
  const changeText = changePercent > 0 ? '–≤—ã—Ä–æ—Å–ª–∞' : '—É–ø–∞–ª–∞';
  
  const message = `
${emoji} *–°–∏–≥–Ω–∞–ª!*

üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${priceData.price.toFixed(8)}
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: ${priceData.change24h.toFixed(2)}%
üê≥ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: $${priceData.capital}
‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${changeText} –Ω–∞ ${Math.abs(changePercent).toFixed(2)}%
`;
  
  try {
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error sending message:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã
async function monitorPrice() {
  const priceData = await getMoriPrice();
  
  if (!priceData) {
    return;
  }
  
  const currentPrice = priceData.price;
  const lastPrice = priceHistory.get('lastPrice');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (const [chatId, settings] of users.entries()) {
    if (!settings.alerts) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    if (lastPrice) {
      const changePercent = ((currentPrice - lastPrice) / lastPrice) * 100;
      
      if (Math.abs(changePercent) >= settings.priceChangeThreshold) {
        await sendPriceAlert(chatId, priceData, changePercent);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏
    const priceAlerts = settings.priceAlerts;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    if (priceAlerts.max && !priceAlerts.maxTriggered && currentPrice >= priceAlerts.max) {
      await sendPriceTargetAlert(chatId, priceData, 'max', priceAlerts.max);
      priceAlerts.maxTriggered = true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    if (priceAlerts.min && !priceAlerts.minTriggered && currentPrice <= priceAlerts.min) {
      await sendPriceTargetAlert(chatId, priceData, 'min', priceAlerts.min);
      priceAlerts.minTriggered = true;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    if (priceAlerts.max && priceAlerts.maxTriggered && currentPrice < priceAlerts.max * 0.95) {
      priceAlerts.maxTriggered = false;
    }
    
    if (priceAlerts.min && priceAlerts.minTriggered && currentPrice > priceAlerts.min * 1.05) {
      priceAlerts.minTriggered = false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users.set(chatId, settings);
  }
  
  priceHistory.set('lastPrice', currentPrice);
  priceHistory.set('lastUpdate', Date.now());
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async function setMenuCommands() {
  const commands = [
    { command: 'price', description: 'üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞' },
    { command: 'targets', description: 'üéØ –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è' },
    { command: 'settings', description: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' },
    { command: 'alerts', description: 'üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏' },
    { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' }
  ];
  
  try {
    await bot.setMyCommands(commands);
    console.log('Menu commands set successfully');
  } catch (error) {
    console.error('Error setting menu commands:', error);
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!users.has(chatId)) {
    users.set(chatId, { ...DEFAULT_SETTINGS });
  }
  
  const welcomeMessage = `
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ $MORI Bot!*

–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –º–µ–º–∫–æ–∏–Ω–∞ $MORI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /price - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ $MORI
‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ /targets - –í–∞—à–∏ —Ü–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏
‚Ä¢ /alerts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
`;
  
  await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
});

bot.onText(/\/price/, async (msg) => {
  const chatId = msg.chat.id;
  
  await bot.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É...');
  
  const priceData = await getMoriPrice();
  
  if (priceData) {
    const message = `
üí∞ *$–¶–µ–Ω–∞*

üî∏ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${priceData.price.toFixed(8)}
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: ${priceData.change24h.toFixed(2)}%
üê≥ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: $${priceData.capital}
‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}

${priceData.change24h > 0 ? 'üöÄ' : 'üìâ'} ${priceData.change24h > 0 ? '–†–æ—Å—Ç' : '–ü–∞–¥–µ–Ω–∏–µ'}
`;
    
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } else {
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/settings/, async (msg) => {
  const chatId = msg.chat.id;
  const settings = users.get(chatId) || { ...DEFAULT_SETTINGS };
  const priceAlerts = settings.priceAlerts || { max: null, min: null };
  
  const message = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.alerts ? '–í–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå'}
üìä –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.priceChangeThreshold}%
‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${settings.checkInterval / 1000} —Å–µ–∫

üéØ *–¶–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏:*
üìà –ú–∞–∫—Å–∏–º—É–º: ${priceAlerts.max ? `$${priceAlerts.max}` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üìâ –ú–∏–Ω–∏–º—É–º: ${priceAlerts.min ? `$${priceAlerts.min}` : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:*
‚Ä¢ /alerts on/off - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /threshold [—á–∏—Å–ª–æ] - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /threshold 10)
‚Ä¢ /pmax [—Ü–µ–Ω–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: /pmax 0.1745)
‚Ä¢ /pmin [—Ü–µ–Ω–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: /pmin 0.15)
‚Ä¢ /targets - –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–π
  `;
  
  await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

bot.onText(/\/alerts$/, async (msg) => {
  const chatId = msg.chat.id;
  const settings = users.get(chatId) || { ...DEFAULT_SETTINGS };
  
  const message = `
üîî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏*

–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${settings.alerts ? '–í–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå'}

*–ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /alerts on - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /alerts off - –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /threshold [—á–∏—Å–ª–æ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è (1-100%)

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ /alerts on
‚Ä¢ /threshold 5 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ 5%
‚Ä¢ /threshold 15 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ 15%

üí° –ö–æ–≥–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.
  `;
  
  await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
});

bot.onText(/\/alerts (on|off)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const action = match[1];
  
  if (!users.has(chatId)) {
    users.set(chatId, { ...DEFAULT_SETTINGS });
  }
  
  const settings = users.get(chatId);
  settings.alerts = action === 'on';
  users.set(chatId, settings);
  
  const message = action === 'on' 
    ? 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.' 
    : 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alerts on –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.';
  
  await bot.sendMessage(chatId, message);
});

bot.onText(/\/threshold (\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const threshold = parseInt(match[1]);
  
  if (threshold < 1 || threshold > 100) {
    await bot.sendMessage(chatId, '‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100%\n\n–ü—Ä–∏–º–µ—Ä: /threshold 5');
    return;
  }
  
  if (!users.has(chatId)) {
    users.set(chatId, { ...DEFAULT_SETTINGS });
  }
  
  const settings = users.get(chatId);
  settings.priceChangeThreshold = threshold;
  users.set(chatId, settings);
  
  await bot.sendMessage(chatId, `‚úÖ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${threshold}%\n\n–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ ${threshold}% –∏–ª–∏ –±–æ–ª—å—à–µ.`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
bot.onText(/\/pmax ([0-9]*\.?[0-9]+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const maxPrice = parseFloat(match[1]);
  
  if (isNaN(maxPrice) || maxPrice <= 0) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.\n\n–ü—Ä–∏–º–µ—Ä: /pmax 0.1745');
    return;
  }
  
  if (!users.has(chatId)) {
    users.set(chatId, { ...DEFAULT_SETTINGS });
  }
  
  const settings = users.get(chatId);
  if (!settings.priceAlerts) {
    settings.priceAlerts = { max: null, min: null, maxTriggered: false, minTriggered: false };
  }
  
  settings.priceAlerts.max = maxPrice;
  settings.priceAlerts.maxTriggered = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
  users.set(chatId, settings);
  
  await bot.sendMessage(chatId, `üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $${maxPrice}

üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ $MORI –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –≤—ã—à–µ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
bot.onText(/\/pmin ([0-9]*\.?[0-9]+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const minPrice = parseFloat(match[1]);
  
  if (isNaN(minPrice) || minPrice <= 0) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.\n\n–ü—Ä–∏–º–µ—Ä: /pmin 0.15');
    return;
  }
  
  if (!users.has(chatId)) {
    users.set(chatId, { ...DEFAULT_SETTINGS });
  }
  
  const settings = users.get(chatId);
  if (!settings.priceAlerts) {
    settings.priceAlerts = { max: null, min: null, maxTriggered: false, minTriggered: false };
  }
  
  settings.priceAlerts.min = minPrice;
  settings.priceAlerts.minTriggered = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
  users.set(chatId, settings);
  
  await bot.sendMessage(chatId, `üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $${minPrice}

üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ $MORI —É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π
bot.onText(/\/targets/, async (msg) => {
  const chatId = msg.chat.id;
  const settings = users.get(chatId) || { ...DEFAULT_SETTINGS };
  const priceAlerts = settings.priceAlerts || { max: null, min: null };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const priceData = await getMoriPrice();
  const currentPriceText = priceData ? `$${priceData.price.toFixed(8)}` : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
  
  let targetsText = 'üéØ *–¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è*\n\n';
  targetsText += `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPriceText}\n\n`;
  
  if (priceAlerts.max) {
    const distance = priceData ? ((priceAlerts.max - priceData.price) / priceData.price * 100).toFixed(2) : '‚Äî';
    targetsText += `üìà –ú–∞–∫—Å–∏–º—É–º: $${priceAlerts.max}\n`;
    targetsText += `   ${distance !== '‚Äî' ? (distance > 0 ? `‚ÜóÔ∏è –î–æ —Ü–µ–ª–∏: +${distance}%` : `‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞`) : ''}\n\n`;
  } else {
    targetsText += 'üìà –ú–∞–∫—Å–∏–º—É–º: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n';
  }
  
  if (priceAlerts.min) {
    const distance = priceData ? ((priceAlerts.min - priceData.price) / priceData.price * 100).toFixed(2) : '‚Äî';
    targetsText += `üìâ –ú–∏–Ω–∏–º—É–º: $${priceAlerts.min}\n`;
    targetsText += `   ${distance !== '‚Äî' ? (distance < 0 ? `‚ÜòÔ∏è –î–æ —Ü–µ–ª–∏: ${distance}%` : `‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞`) : ''}\n\n`;
  } else {
    targetsText += 'üìâ –ú–∏–Ω–∏–º—É–º: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n';
  }
  
  targetsText += '*–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n';
  targetsText += '‚Ä¢ /pmax [—Ü–µ–Ω–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º\n';
  targetsText += '‚Ä¢ /pmin [—Ü–µ–Ω–∞] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º\n'; 
  
  await bot.sendMessage(chatId, targetsText, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π
bot.onText(/\/pmax -1/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!users.has(chatId)) {
    users.set(chatId, { ...DEFAULT_SETTINGS });
  }
  
  const settings = users.get(chatId);
  if (!settings.priceAlerts) {
    settings.priceAlerts = { max: null, min: null, maxTriggered: false, minTriggered: false };
  }
  
  settings.priceAlerts.max = null;
  settings.priceAlerts.maxTriggered = false;
  users.set(chatId, settings);
  
  await bot.sendMessage(chatId, 'üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /targets –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ü–µ–ª–µ–π.');
});

bot.onText(/\/pmin- 1/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!users.has(chatId)) {
    users.set(chatId, { ...DEFAULT_SETTINGS });
  }
  
  const settings = users.get(chatId);
  if (!settings.priceAlerts) {
    settings.priceAlerts = { max: null, min: null, maxTriggered: false, minTriggered: false };
  }
  
  settings.priceAlerts.min = null;
  settings.priceAlerts.minTriggered = false;
  users.set(chatId, settings);
  
  await bot.sendMessage(chatId, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /targets –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ü–µ–ª–µ–π.');
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpMessage = `
üÜò *–ü–æ–º–æ—â—å –ø–æ $MORI Bot*

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /price - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ $MORI
‚Ä¢ /settings - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ /targets - –≤–∞—à–∏ —Ü–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏
‚Ä¢ /alerts - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:*
‚Ä¢ /alerts on - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /alerts off - –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üéØ *–¶–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏:*
‚Ä¢ /threshold [—á–∏—Å–ª–æ] - –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (1-100%)
‚Ä¢ /pmax [—Ü–µ–Ω–∞] - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≤—ã—à–µ (-1 –æ—Ç–∫–ª)
‚Ä¢ /pmin [—Ü–µ–Ω–∞] - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∏–∂–µ (-1 –æ—Ç–∫–ª)
`;
  
  await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Webhook endpoint –¥–ª—è Telegram
app.post(`/webhook/${BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Health check endpoint
app.get('/', (req, res) => {
  res.send('$MORI Telegram Bot is running! üöÄ');
});

app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    uptime: process.uptime(),
    users: users.size,
    lastPriceUpdate: priceHistory.get('lastUpdate')
  });
});

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã
setInterval(monitorPrice, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
  setMenuCommands();
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–¥–ª—è production)
  if (process.env.NODE_ENV === 'production') {
    const webhookUrl = `${process.env.WEBHOOK_URL}/webhook/${BOT_TOKEN}`;
    bot.setWebHook(webhookUrl);
    console.log(`Webhook set to: ${webhookUrl}`);
  }
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
  monitorPrice();
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('Shutting down gracefully...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('Shutting down gracefully...');
  process.exit(0);
});